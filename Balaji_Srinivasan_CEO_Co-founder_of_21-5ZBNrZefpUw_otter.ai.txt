Unknown Speaker  0:00  
Thank you for that kind introduction. I'm happy to be here. So the talk today is going to be a technical talk on, you know, Bitcoin digital currency and whatnot. For those who have those you folks who have questions on VC, or entrepreneurship, or startups or what have you, I'm also happy to take those questions afterwards. So, you know, you've got your pitch decks warm up, okay, and it's like, flooded me afterwards. Okay.

Unknown Speaker  0:22  
So,

Unknown Speaker  0:24  
very briefly, if you guys have a laptop, you can get, you know, just started messing around that I would recommend second easy to instance, with Ubuntu, because you'll actually be setting up a server, if you start messing around with the stuff and you may not want to do that on your local laptop, then you can just execute this command to install the software. In particular, we have, I'm going to come back to this later in the talk. But if you want to just get some free Bitcoin to use for coding, okay, we've actually built an app on top of our software that you can actually access a ton of code tasks, and you just do micro tasks for micro payments. So you can just click a few buttons and get like a few dollars worth of Bitcoin and mess around with it. Okay, and so use this access code of brown October 13. So it's in beta right now. So you can mess around with it. Okay. And in general, if you want to help, okay, just go to our Slack channel. It's slack.co. And there's a lot of developers there who will just answer questions. So, you know, I will answer as many as I can. But then offline, if you're messing around with this technology afterwards, and you can go there, okay. And anytime, just raise your hand if you've got questions during during this talk. Okay. Oh, already? Wow. Okay. Yeah, cool. Oh, yeah, sure. Sure. Yeah, here it is. It is brown, Octa. 13. all caps. So brown October 13. Right. Yep. Okay. So um, and by the way, this works. It's only just desktop web right now mobile web is coming like next week in mobile app in like two or three weeks.

Unknown Speaker  1:52  
So. Okay, so Um, so yeah, so,

Unknown Speaker  1:58  
but a one question Who here has some Bitcoin? Okay,

Unknown Speaker  2:04  
all right. Who here has heard of Bitcoin?

Unknown Speaker  2:08  
Alright, just wondering. All right. Who here is like heard of blockchain as distinct from Bitcoin? Okay. All right. Good. And who here knows how to code?

Unknown Speaker  2:18  
Alright, good, good. Good. All right. Okay.

Unknown Speaker  2:21  
All right. So

Unknown Speaker  2:22  
let me talk about, we're gonna talk about. So title, the talk is about this concept of a machine payable web, right. And we think this is potentially the third major web. Okay, so the first web is the World Wide Web, where you've got nodes, which are documents and links are hyperlinks, right? Between documents? And so Google, crawl that web? And then the second web is the social web, right? Where nodes are individuals and links are friends, between individuals or tweets, or likes or pokes what have you, right. And so that's Facebook, canonically, and others. And we think there's going to be a third web, a web where the nodes are both humans and machines. But we're the edges are payments between, you know, machines, and humans, okay. And so like, we think of this as the machine payable web, where the machine can actually initiate and receive a payment on each end. And that's a new thing. And the reason it's new is that because Bitcoin is digital currency, it's actually possible for a machine to possess money in a way it never could before. If it as a private key, it is sufficient and necessary condition for the machine to actually have possession of the money. It's the so called bearer instrument. And that's a really deep concept, we'll come back to it. But at the very highest level, the idea here is that it's now possible to earn digital currency on every HTTP request. And I'm going to say through this talk, Bitcoin, Bitcoin, Bitcoin over and over again, but the ideas here are applicable to any blockchain. So you could use this with aetherium. You could use this with a private blockchain. In fact, support for those is on the horizon for us, right. So Bitcoin is just you know, that the most major one right now. Okay. So a little bit more on myself. So, you know, thank you to Elizabeth for the kind intro. I'm actually a Stanford lifer. So, you know, academic, up till my late 20s. And, you know, lots of Stanford degrees, you know, parents pay them a lot of money, just like yours are paying brown a lot of money. And so I taught actually a MOOC course on startups to more than 200,000 students a few years ago. So that was you take that. Okay, cool. And after, after, you know, getting my degrees at Stanford, I founded a company called Council. So funded by you know, Founders Fund and David Drummond of Google, scale that to be a pretty big deal. And partner nation Horowitz and I'm also the co 21. Okay, so that's me. All right. And if you want to follow me on Twitter, or ask me questions, wherever it's at Balaji s, okay. So, alright, so today's talk, and how's the resolution of this? I mean, is that it's not that legible. Let me see if I can improve the resolution here.

Unknown Speaker  4:56  
That looks like the best for VGA. All right. It is a little blurry. Well, I will gesture. Okay. So can you read that where it says payment required? 5000? Is that legible? Okay, fine. So it's a little blurry. But basically, and I'll post these slides later, so you guys can look over them. Okay. But essentially, we're going to talk about three things. So first is this concept of the machine payable endpoint, and a library that we call 21. When you use the command line, or to one if you use it in a, in a Python script, and essentially, the idea here is you can take any web application. So it's the simplest example of hello world over here, okay. And you can put one line of code such that that application is billing on a per request basis, right. So every single HTTP request that comes into this is being asked for 5000 satoshis, before that request completes. Okay, so it's like true micro payments on like a per request basis. And so this is this concept of a so called machine payable endpoint, because a machine is paying another machine to access a web web accessible resource, okay. And so we'll show a bunch of different applications. Once you've got this basic idea that you can require a payment for an individual HTTP request, you can take that and go in a lot of directions with it. So we'll show like grid computing will show intelligent agents will show surge pricing for API's and all types of stuff. And one of the key concepts is, well, over here, I show constant, like 5000 satoshis, you can put in a function there. And that function can take in a request and return a price. So if it's your friend who's you know, you've got Facebook login, you can give a friends and family price, you can give a lower price. Or if there's 30, people who are putting in requests at the same time, you can give a higher price surge pricing for API's. So this number can be completely dynamic, and not just a static price. So that's a very powerful concept, like totally computable real time prices. Okay. And then third is basically, you know, where do we go from here, and I'll show you kind of the first first party like, like, major app that we've built on this technology, so like a production app. Okay. All right. So let me let me motivate things a little bit by just reviewing Bitcoin and like one slide, talking about this concept of HTTP error code 402. And the idea of a machine payable input, and then this idea of micro payment channels, and you know, how we actually implement micro payments with Bitcoin. Okay, so what is Bitcoin? You know, how do you how do you actually think about it? Like, how do we think about it, we think of it as a way to represent scarcity on the internet. Okay. And you can motivate this in four steps. So let's say we start with physical cash. Okay. So if I give, you know, Elizabeth, you know, some cash, then there's an implicit property that we take for granted, which is that I no longer possess that dollar bill. Right? You she has it in her hand, right? It is mutually exclusive, both of us can have it at the same time. If we try to translate that naively to the digital realm, right? If I instead try to email her the serial number on that dollar bill. Okay. Now, she gets a serial number over here. But the problem is, I still have a copy. And so I have an incentive to double spend that serial number, because it's not scarce, right? If it's cash,

Unknown Speaker  8:10  
Well, okay, fine, you know, you know,

Unknown Speaker  8:12  
you, you have a strong incentive to spend it again and again, right. And so even though it seems like a natural thing to try to use this unique gun, but well, so double spend, like, if if I take the serial number of the dollar bill, and we try to agree to treat that as cash, after I email her the serial number, I still have a copy of it. So I can email another person, that same thing and be like paying the same $1 bill to two people twice or three times. Right. So that is the fundamental issue with the so called double spend problem is, you need some way to have scarcity in the digital realm for people to be able to send cash,

Unknown Speaker  8:48  
right. So the way that we we clear,

Unknown Speaker  8:52  
okay, so we currently handle this and avoid double spins, is we have effectively the centralized actors, right banks, and every time we use PayPal, or Venmo, or something like that, at the lowest level, under the hood, there is a minus and a plus that's being recorded in a ledger at the Fed. You know, it's like the Fed wire system. And basically, these centralized actors, we trust them to debit a and to credit B, and it's in that debit, that scarcity is introduced into the system, right? We basically trust a central actor to

Unknown Speaker  9:21  
to subtract it, right.

Unknown Speaker  9:22  
Okay. What Bitcoin does, and its major innovation was to figure out how to decentralize this ledger, such that no one party has control over the minuses and pluses that constitute where your balances, right? Instead of split it into a network of miners, each of which has a probabilistic chance of updating that ledger, and each of which gets a reward if they manage to do that update. Okay. And there's a lot of details on this, which I'm not going to go into. But the essential concept is, we have now managed to reintroduce scarcity on the internet without a centralized party. Okay. And the reason that's important is it means that no one party can block the cash transaction anymore. So the whole nucleus applications have become possible when you no longer need like permission from a bank to do something, right. Among other things, you can disrupt banks. Haha, at least in theory, so. So this is why we're excited about this right. And the closest precedent for this was actually the developer of the internet itself, it used to be that you had to go and do a deal with AT and T to deploy code related to information on the network backbone, once any node could ping any other node directly, that went away. And the cost of basically writing code, religious information dropped by like six or seven orders of magnitude. Okay, so that's kind of similar to what's happened here. But taking out the intermediary, took out a lot of costs, and a lot of risk. Okay. All right. So this is what Bitcoin is, and relates to this. There's this concept of HTTP error. 402. Okay, so now, everybody here has seen an HTTP error. 404. Right, like file not found? Yeah, you know, you go load a browser, go to brown.edu, you know, asdf, or whatever. And it'll be found not found right? on. But there's another error code that's been around for a really long time that is unused, right? If I go to the W three website, in fact, right now, and I go here, you see four, four file not found, you see, four or three x forbidden, you see 402 payment required, this code reserved for future use? Well, I'm here to tell you the future is now. And what we're we've done here is we've actually taken that error code. And we've actually made it functional and made it useful. And the reason this has been reserved for such a long time, as for 20 years, people wanted to build micropayments into the browser head. So you know, my colleague and partner, you know, Mark Anderson, Anderson Horowitz put this code in there. And they could never work it out with the banks and with Microsoft, and so on, because everybody wanted to be the troll on the bridge was taken attacks, right? So nobody, they're able to coordinate on what a micro payment solution was. So now, 20 years later on, here's a way that you can actually implement that. So you take the concept of Bitcoin, the concept of forward to put them together. And this is a very naive implementation, but we'll give you the basic intuition for what's happening under the hood. Okay, so a client makes a request to the server for a resource. And the server initially says, No, pay me, right. Not quite as politely as that, and sends back a 402. And basically, the denies the response, right? The client says, okay, and because it's Bitcoin aware, it pays the server and the server remits the resource for the 200. Okay. Okay. And in a little more detail, the way that you do that, if you see here, where it says like bit curl, that's like our little implementation of a Bitcoin aware curl, so you mean no curl, you know, you do, you know, HTTP request with it. And over here is an example of, we're doing a bit curl, and we're doing a post, we're saying, Take this text message, okay, and this phone number, and we take the Twilio API, and we wrapped it, okay. And we're trying to basically, you know, as a client, we're trying to, you know, send this text message to this phone number. Okay. What happens is, initially, the server denies the request, okay. And it's asking for point 001 Bitcoin, it's saying, pay me at this address this amount, before I let this go through, alright. And then what happens is the client sees this and because it's Bitcoin, where it says, All right, and it looks at HTTP headers, and it sees this address and sees this price. And so it pays this address this amount, and it gets back a transaction ID from the blockchain.

Unknown Speaker  13:22  
Okay, so the blockchain is a third party validator that's giving a receipt that says that the client just paid the server. Okay. And frankly, you can use a full transaction, not just a transaction ID but same concept. Then it retries the request, and it puts this in HB headers of the request. And now the server can say, okay, you paid me fantastic, and it returns a response. Okay. Now, this is a naive implementation, I'm going to show how you can improve its efficiency in many different ways. But the fundamental handshake over here is pretty simple to understand, right? I asked for a resource. The server denies it and gives quotes me a price. I pay the server using the blockchain as the validator show that's been paid, and the server returns the resource. Okay. Now think about what is missing here. Right? What is not here? What's not here is there is no credit card, right? There was no address form with like your mailing address, and so on. There is no signup, there is no API key, there is no rate limiting, right, it was just a pure machine to machine handshake, with payments becoming packets. And that's awesome. Because these two machines, one could be in Turkey, and one could be in Japan, they could be like totally different parts of the world with totally incompatible financial systems. And you've now killed all the overhead of them, setting up the connection and paying each other to do something. And that's that's pretty interesting. Right? Now, the immediate critique one of their several critiques of this one critique is that you don't want to do a transaction for every single API call. Another critique is that it takes 10 minutes typically to clear a transaction. So you know, how does the server respond quickly enough. And there's various solutions and optimizations for each of these. I'll show you one optimization So one optimization is basically for the issue of, if you send lots of transactions Why? Why do you not want to send lots of transactions? Who here has heard about like the Bitcoin block size, controversy and issue? Anybody? Oh, really? Okay, that's not okay. So that's actually it's an issue right now, like within the Bitcoin community as to how many transactions per second that the network can handle, right? Because this distributed database, you need to actually have a significant amount of storage for it. And it's becoming something where there's enough demand that the block size is getting larger and larger, right? So a good way to think of it is, and this is actually you guys were actually born after this. But you may remember vaguely, that there used to be things called 28, eight and 57, six modems, in like the 90s. So this is like pre broadband, who actually remembers that?

Unknown Speaker  15:48  
Holy shit.

Unknown Speaker  15:50  
Alright, so you guys really are very young. But it used to be a time before broadband Internet, and you'd actually use your phone to connect to the internet. And at that time, you remember that? Dell? Okay, fine. dial up. All right, okay. You do remember dial up is like B.

Unknown Speaker  16:06  
Right? Okay.

Unknown Speaker  16:07  
So, so dial up internet, if you were, if you're Amazon, or your Yahoo, or you're one of the first internet companies, the whole engineering name of the game was to minimize the amount of traffic you sent over the internet. Instead, you want to do as much computation as you could either on the server, or on the desktop and as little back and forth, right? And so Bitcoin is in that era right now, right? Where you want to do is do as much competition as you can on the server, or on the client or over the Internet, and minimize the traffic on the blockchain, because the block size is limited.

Unknown Speaker  16:35  
Okay, so how do we do that?

Unknown Speaker  16:38  
One way to do that is with something called micro payment channels, okay. And I'm just going to give the very high level here. And, you know, you can read the tutorials and stuff to dig into this. But the best way to analogize micro payment channels, I picked an example that all college students will be familiar with, at least that I was, which is the cost of a bar tab. Okay. So, a payment channel is a lot like a bar tab, where if you go to a bar, where you don't want to do is swipe your card for literally every single drink, or every single, you know, pizza slicer, what happened, right? Instead we want to do is at the beginning of the evening, you hand over your cart, you drink your drinks, you eat your food, you you do all these things, and at the end, you close it out, okay, and so you've replaced in transactions with just to write a deposit and, you know, a clearing transaction. And that's basically the way that the payment channels work. What happens is you've got a customer and a merchant in our case would be like a client in a server for like, you know, the guy you're buying API calls from, and you initially put down a deposit. And that takes a little time to clear. But then after that, you can do an unlimited number of API calls with essentially a micro payment in between. and the crucial concept is, until you're done, you don't actually settle it to the blockchain. Okay. And so that's actually an interesting aspect of the Bitcoin network, you can have private settlements, like IOU between two parties, before you broadcast out with a final balances. Okay. So that's an interesting aspect of knowing how, you know, if you know, the guts of a network protocol, you can derive innovations that that work around, right. So the main Upshot for you guys is, this is a way that you can radically reduce the number of transactions on the blockchain. And you can have it so that if you set up a deposit with a merchant, then you can have lots and lots and lots of API calls and then close it out. So you can have 10s of thousands, hundreds of thousands of API calls at fractions of a cent, and then close it out on the blockchain in a totally decentralized and distributed way. Okay. Now, there's many aspects I could talk about with this. But this is the high level way of how one implements micro payments. Now, the next step with this is something that we've set up, and I'll see if I can show you this slide. Think I skipped it, but I'll show anyone who's skip it. So something that we've set up, oops, is like a hub and spoke system. So each client can open up a deposit to us. And now everybody who's got a deposit open to us can do a micro payment everybody else? Okay, so now you amortize it on another dimension, right? And then the third step is in the next like year or so, we will open source the hub code itself. So then that means that anybody can set up their own like micro payments hub. And so if you're running like an IoT thing, or what have you, all the devices that are connected to that hub, can now do micro payments back and forth for the cost of one deposit transaction. Right. So you have to amortize a lot of costs over one thing. The other question? Yeah. Is there anything like keeping the virgin or the other example of this? Because especially if you're not posting to the blockchain yet again?

Unknown Speaker  19:38  
Good question. And the answer to that is basically, payment channels are set up in such a way that the maximum amount of fraud that you could do is you might have something where the customer sends a payment, the merchant doesn't send back an API call, and then the customer will break the channel. So the maximum of fraud on any one payment channel is like one API call worth which is like a fraction of a cent, so it's not really worth it. And then if you do to that and the reputational costs Where people know that that hub is a bad hub, then you know, goes up, right? And so the short answer is some combination of that plus reputation is our answer. Okay, so this gives you the high level picture of what's going on in terms of micropayments. Right? So given this, you know, we we just reviewed Bitcoin, we viewed the concert for two and machine payable endpoints, and talked about micro payment channels and hub and spoke. And so now we have the primitives, the the tools, we need to develop these things. We call it machine payable endpoints. But why would that be useful? Right? Why, you know, okay, we can do these micro payments, we can we can have machines pay other machines, why would that be useful? But one way of thinking about it is, if you guys have ever signed up for an API, okay, if you're used who yours use Amazon Web Services. Okay. All right. So you probably use an API at some point. And typically, if it's a paid API, you will go through what I call an API paywall, okay, so just like the Wall Street Journal will block you and say, Hey, you know, put in your credit card and so on. Before you can use a paid API, you have to go here, you put in your credentials, and you get back a an API key. All right. And then every time you're making an API request, you attach that key, and it shows that you've paid for it, and they can log how many times you accessed it. And they bill, your credit card, you know, in this out of band process, right? And so this is very inelegant, right? It means that payment and usage are uncorrelated, right? And there's a lag between them and you have monthly billing cycles, and it's actually a huge bookkeeping pain, okay? It'd be much better and much more elegant, if you could do the settlement in the same request. Right? If you could attach some cash to the HTTP request. Now you could pay as you go. Right. So there's not the overhead of setting up a billing relationship. It's not a long term relationship. It's, it's, it's, it's Tinder for API's. So, so basically, so this idea, if you can pay on a per use basis, that's, that's a cash relationship, right. So this is a basic idea of a machine payable endpoint, it can radically reduce the fixed costs associated with setting up a billing relationship. And so now, that means you can buy for many, many more things. And I'll show some examples of this in a second. We have a full tool chain for messing around with this stuff, if you want to play around with it. And so we've got this trail and software allows Bitcoin micro payments or HTTP, it's open source available code, and you can basically sell human or machine time for micro payments, alright. And to mess around with it, you can go to EC two and Buddha machine image, alright, we recommend DC two, it'll just be a very consistent development environment. If you do it on your laptop, then we put you through a bunch of warnings, because you'll be turning your laptop into a server. And you may may or may not want to do that. To set up your EC to image, if you sign up over here, we give you some free Bitcoin and a faucet, you don't actually have to do that. But this is a way to just stop the abuse of the faucet because lots of people want free Bitcoin. And then you can install the tool chain over here. Okay, so this is the tool chain for building machine payable endpoints. And it gives you essentially three pieces. So Oh, yeah. And so this intro to train one tutorial, by the way, if you just go to our tutorial site, it turns out how to learn intro to 21. Let me just kind of go over there for a second. Oops. Yeah. So this tutorial intro 21 will go through the full tool chain and whatnot and introduce everything. I'll give a high level overview now. And you can kind of read the material on your own time and ask questions in slack. So high level overview is this has basically three components, right? So first is it's got a command line. And that command line is called 21. And it gives you access to your wallet. It lets you perform various kinds of actions like seeing your balance and moving keys around and stuff. And it also allows you to publish apps, right? So you can do 21 sell, and then immediately turn any machine into something that's selling machine payable endpoints. Okay.

Unknown Speaker  24:06  
The second thing is we have this to one library. And this is actually the thing that's underlying this, this command line, but it also allows you to create servers that use Bitcoin over HTTP. Okay, so this is how you can build these machine payable endpoints yourself, right. And then third thing that the external covers is this marketplace, where it's like a, like an eBay, where you can post links that other people can buy and sell because once you've got your machine payable endpoint, you want people to buy it, you want to sell into it, you want to mess around them, right? Okay. So these are the three pieces that it covers. And if you complete the tutorial, by the end of it, you'll be able to set up your first machine builder point, which is just a Hello World, right? So you pay up 5000 satoshis, you get back down to low world, right? And that's like, you know, this technological spark this fire and literally it's like, you know, 10 lines of code over here really, really short. Okay? And this works with flask and it works. Django, it's Python only right now we'll add like JavaScript and other stuff support. But hopefully all you guys know Python. Okay, so so once you do this, you understand the concept. But now how can we apply this? And so I'm going to give about, you know, several different kinds of examples. And we can class for those examples into basically three categories. Okay, these three classes of apps that one can build with these machine payable inputs. And those are cloud grid and cloud applications respectively. All right. So let me let me talk about these in turn. So for a cloud application, what you're doing here is you've got a computer, it's got some digital currency, and it's sending Bitcoin up. And what you've done is you've taken one of these API's, like the Google Maps API, or Bing search, or like file conversion, or what have you, and you put a machine payable endpoint in front of it. Okay. And so now what you can do is you can make those existing things withdrawal table with credit card, you can make them payable and Bible with Bitcoin. Okay. So that's like one one class fabrication. A second class application is what we call like grid computing. Right? Now, grid computing is actually a term that's been around for 20 years as well, it was something that was neck and neck with cloud computing in the late 90s. And the fundamental difference between grid computing versus cloud computing is that in cloud computing, you've got servers that are located in a data center. Whereas with grid computing, you've got all of these part time soldiers, right, like all the part time computers, the phones in your, in your pocket and the laptop on your desk, you're renting all the spare capacity in people's homes in offices, okay? Another major difference between cloud and grid computing is that the cloud is unidirectional flow of payments, right? You're just paying Amazon, Amazon's never buying from you. But with the grid, the payment flow is bi directional. Right, sometimes you will sell machine time to the grid. And sometimes you will buy machine time from the grid. Okay, so you can actually sell your spare compute resources for digital currency. And the third major difference is that while the cloud is localized in data centers, because these computers are spread all around the world, you can now pay computers to cents and actually, upon the world. Okay, so you can rent 10 million iPhones to send back GPS data with the consent of their owners, for example, right? So that's the kind of thing that you could not do in a in a data center. It's a totally new class of applications. We call it like the economy of things or what have you. Alright, so you can actually rent machines out on the grid. All right. The third major class of machine payable apps is what we call the crowd apps. Right? So here, the back end is not a cloud server. It's not grid computers, or computers on the grid. It's humans. Okay, so it's humans often working on their phones, who are like the the people behind the curtain. And you can actually combine these kinds of concepts. So for example, you could have a translation service, they gave a very rapid, quick, cheap, low latency machine translation. And then like, you know, 10 minutes later gave a human translation, those higher quality, but more expensive. Okay, so you can mix like cloud and crowd or cloud and grid in this way, right? And so just to, you know, these are kind of three abstract concepts. First, I'll describe like their benefits, and then go into some details. So from a benefit standpoint, why would you want to do this? Why would you want to make cloud, you know, API's that you can already buy them with a credit card? Why would you want to make them Bible with Bitcoin? Well, the answer is that within about five years, we think that Bitcoin is going to come standard in Linux distributions,

Unknown Speaker  28:20  
right? So when you install Ubuntu like 20, or what have you, you're going to have a bitcoin wallet standard, you want to show that any money, but it'll be there, okay. And so if you have a wallet as a standard part of a Linux distribution, then once you fill that wallet, you never have to sign up for an API again. Okay, you need no more API keys, your money is your API key. Right? That's really interesting, because that kills the fixed costs of API's. If you've ever set up a new project, you have to sign up for stripe and mixpanel and Google Analytics, and this and that, and so on. And you have to sign up for all these API keys before you can do the first invocation of your program, this kills that kills it all the way down. And it means you can sign up for many more API's. And you can use API's much more more frequently. So that's a benefit for wrapping these cloud API's. For grid and crowd API's, what you're basically doing is you're selling time, over the internet. Okay, so in the case of the grid, it's like Airbnb for machines, you're selling spare machine time, right? If you think about your computer is pretty powerful thing. It's really not running anywhere close to capacity. The main things that have used grid computing up to this point have been like folding at home or CD at home. So you're searching for aliens or solving cancer, or searching for cancer causing aliens. And like so that's that's like, where grid computing is right now. Right? And the issue there is it's all status based compensation, like if you go to folding at home,

Unknown Speaker  29:44  
which is this

Unknown Speaker  29:47  
thing for finding.

Unknown Speaker  29:51  
He uses your screensaver to, you know, fold proteins, right? So it's an example of grid computing. But the guy who's running it, it's good friend of mine. He can't Pay all these machines. So instead, what he does is he has like a leaderboard over here. And so people just compete on the basis of status. Right? So why do you fold the protein so you can rank up and leaderboard so your status compensated right? And so that that is a hard limit of a few hundred thousand people who could donate. But if you can pay in money, well, now you can actually monetize all that spare time on the grid, right. And similarly, with the crowd, you can monetize all the spare human time. And I'll show you an example with the with the tasks app, and so on. Alright, so let's go into some examples here to make this concrete. Okay. And very importantly, all these examples with full code are at turn into code learn, right? So here, for example, is the basic idea of a Bitcoin payable API, right or machine payable API. And if you just go here to code, learn Bitcoin payable API, go to here, you can just click that link. And like all the code is here, you can just paste it in and get it to work, right. So everything I'm referring to here, you can kind of do on your own time if you go to the tutorial set. So here, you're basically saying what payment getting done API call. Okay, so far, so good. What can we do with that? Well, one example is, you can make a whole new class of Linux distribution, a Linux distribution, where each command line invocation costs like one cent, and you get back a command line result, right? And so actually, like about a year ago, somebody made a dystopian version of this, which I laugh at. But basically, a while back, so let me see if I can find this.

Unknown Speaker  31:34  
So while back, they announced this.

Unknown Speaker  31:40  
It's like fake news kind of thing. Right? The if you guys know, gmu, right, Jr, taking 100 50 million bucks from us, all right. And, like, Do you guys know what the junior project is? Wow, really? Okay. Have you ever you ran LS? Okay, all right. Okay, sorry. So this is basically, if you if you've ever used the command line over here, and you you've run like LS or, you know, GCC or any of those tools, those are all the junior tools. Okay. So basically, this is the basis of like, essentially, your whole Linux computing environment. And they're free, and they're open source. And so that's why it was a funny joke. When this guy over here, went and made over a put it, see if I can find it.

Unknown Speaker  32:31  
Here is the pricing.

Unknown Speaker  32:38  
Yeah, it was a funny joke when this guy went, and he made a thing, which added pricing to these tools, so that every time you ran the command, it cost one set. Okay, that was meant to be a funny joke, right? Now, the thing about this is these commands. The reason it's like a dystopian thing to make them suddenly cost money is because they execute for free, since you're executing them with your local computer resources. Right? But it's not completely legitimate to think about a tool, which would use somebody else's computer resources, in which case, you'd want to compensate them for that time, because computers aren't free, right? And so we've developed a whole new class of applications that use remote computer time, and you pay like one cent on every invocation. Okay. And as an example of that,

Unknown Speaker  33:22  
go here.

Unknown Speaker  33:26  
So,

Unknown Speaker  33:28  
monetizing the command line, we take Google Maps, and we put that behind an endpoint. So a so called geocoding endpoint, where every invocation costs 3000. Satoshi. So geocoding is turning like 1600 Pennsylvania Avenue into a latitude and longitude, okay. And then we make a little client for that we wrap that server. And so now all you have to do is just type like map 21, and you get 1600 Pennsylvania Avenue, and you pay one cent, and you get back a latitude and longitude. Okay, so that's cool, because it's now the basis for potentially a entirely new kind of Linux distribution. One that you bundle a bunch of command line tools that are doing, you know, photo editing, or machine learning or anything that has some server side component. And you can actually make like a freemium Linux distribution was pretty sweet, right? If it runs locally, it's free. But if you want to use a cloud, and you know, 1000 servers, just be your computation, it'll cost you something. Okay? So that's like, one example. All right. Here's another example. So you can build simple games. And up to this point, I've talked about payments up, but you can have them pay down, right, so we've built like a, like a blackjack room, where we have 10 computers that are all gambling against each other. And so you can just have your AI so just internally within the company, it's like a little competition to who has the best AI, right? Because you have your bots and you know, like they're they're just attacking each other. Right? Which I think is awesome. It's like really interesting. It's, it's a, and you get good at probability quickly because it's actually like real money moving back and forth. If you lose, right In fact, actually all probability came out of, you know, gambling, right, like dice and cards and, and whatnot. So this is cool, because this actually allows payouts. And you know, one thing I often ask is, you know, so for example, how many, how many websites have you guys put your credit card into, right, you probably put your credit card into dozens, hundreds of websites, there's very, very few websites that you put your bank account into. Right, far fewer. And so what that means is that pay ins on the internet are pretty easy. But pay outs are very hard. That's actually a whole missing component of internet websites that pay you. And the reason is, that's been very technically hard to do. Because giving a website your bank account is also giving them the right to debit from your bank account. Whereas with a Bitcoin address, it can't be debited. So a whole new class of things that we think is going to come about over the next five years, or websites that pay you for actions or for doing things of value. And this is like one very simple example that where you can play a game, right? Okay. All right, let's do another example. So if you've got two of these endpoints, right, if you take in like a functional programming class, right, you can do f of g of x. And the same way you can compose endpoints together to make like a digital supply chain. Right. So just like you know, Starbucks has a cup vendor that sells cups on you can have a service that behind the scenes is calling another service, for example, something that takes text and translates it could be calling some humans behind the scenes, right. And so this is kind of cool. And the reason this is important is, we think that the offline economy is unlikely to be monetized with Bitcoin anytime soon. So people talk about Oh, buy a cup of coffee for Bitcoin, or, you know, go and buy a laptop for Bitcoin or something like that. But the problem with that is, if you go and buy a laptop, from Dell, for Bitcoin, they're going to need to liquidate that Bitcoin to pay their vendors in Taiwan, because the vendors in Taiwan are accepting dollars, right? That whole physical supply chain runs on dollars, there's no incentive to convert over to this volatile digital currency. But for a digital service, you could actually imagine a supply chain where all the API calls were removed, or in digital currency, there's actually a 10 x advantage there because you kill the signup cost. So now you can actually think about a full supply chain where Bitcoin is actually circulating. And it's not just, you know, okay, bought once and then liquid. Alright, so in this example, whether we had endpoints, two endpoints, and they were cooperating, we can also have them competing. Okay. So if you've got two servers that are offering the same thing at different prices, you can have a very simple intelligent agent over here. And again, all these examples, they're there, they're there, they're, you know, they're in the tutorials, you can have a client that looks between servers, and just chooses the lowest price. Okay. And so now, you know, all your price search becomes much easier because you just get a quote, and then you can purchase on

Unknown Speaker  37:45  
it. Okay, so another example. So now, if you've got a database or a file store, you can put a machine payable endpoint in front of that. And now you can sell files. For example, like your own little itunes store, you can set that up, sell mp3, you sell PDFs, sell your Instagram photos, sell whatever, right, your YouTube videos, and you can go even one level lower, reconsider, not just database, but like actual bytes on a hard drive. Okay, so in this example, grid computing with Bitcoin micro payment channels, you can literally rent out individual bytes on somebody else's hard drive in return for micropayments. And that's kind of cool, right? And the reason we think that's important is we think of Bitcoin as the next great fundamental system resource, right? So what's the system resource CPU, right? Ram, hard drive space, bandwidth, okay, memory, like these are these are things which are scarce resources on a computer. But if you take digital currency, it's like the ultimate system resource. Because with it, you can now buy and sell all the other system resources, you can basically buy harddrive space somewhere else if you lack it. So as long as you have Bitcoin, you can have very thin client that's just doing API calls for everything and just paying them. It's like comparative advantage, but but for machines. Okay. So let me give you a few more examples, right? So a good example, right? So in this case, you've gotten on one server, but you got a bunch of them. And because we've killed the fixed costs of establishing a billing relationship, we can have an aggregator that goes and sends a little bit of Bitcoin plus an IP address, and has all of these servers go and ping that IP and return aggregated pink stats right. Now, why would we want something like this? Well, there are there are websites already, like pingdom.com, which basically talks about how they have a network of probe servers to test your website from all around the world. Right? And why would you want something like that? Because you want to know if your website is up, you know, in Kenya, and is it up in like India? And is it up in like Brazil, and so on and so forth? Right? Lots of servers are pinging. But, you know, one of the issues here is you don't really want to have that ping coming in from a data center, because a data center is going to have an artificially high uptime, right? If it's in Singapore, or have you been to Amazon data center, it's not really the same as a person in Singapore on a cell phone, right, the network congestion won't necessarily be reflected. And so one way to do that too, That is you actually rent individual computers, and you have them go and script something and get you back the results, right? A couple more examples. So here's an example that I'm pretty interested in, which is like a distributed EPA. Okay, so let's say you've got, you know, water quality issues like in Flint, right? Or you've got radiation like in Fukushima, right? There's a little bit of a collective action problem, where you'd like is for folks to be running sensors locally. And, you know, you'd want to have like, the sensor network, or all these folks were running sensors. And now you could actually find out, is my water quality apparent, both for myself, like, Is it something where like, the lead concentration spike today for versus the past? Or is it apparent, like systematically, like, it's just generally high relative to the people in the neighborhood? Right, that'd be very useful. The issue is, there's a collective action problem, there's no incentive for people to do this. And so one way that you can potentially work around that. So we developed this application, we call, you know, sensor 21, where you can actually aggregate individual machines like this, and you can pay them in Bitcoin for their sensor measurements. So who buys this kind of data? So Bloomberg buys this kind of data, right? You know, many traders, you know, premise data desert guys who buy this kind of data, right? And with this example, over here, we have go down. So this is the kind of thing that, that interests you, we've got, like, you know, a full thing with all the hardware and stuff if you want to actually go and build the sensors, yourself, and all the databases, if you'd like to mess around with it. Okay. Um, just a couple more, and then we'll wrap up. So with a crowd, we have a crowd example, we've got this big one SMS right. Now, one question for you guys, is if you put your public email address on the internet, right? Who here does that? Who puts their public email? Okay, many people, some people do, but many people do not. Why? Because you're gonna get all this spam, right? All these people are going to contact you, and they're going to waste your time. But if you had a public SMS, or a public email address that people could contact you at and pay you, when they contacted you. Now, it'd be something that would be like, you know, actually worth your time. They're actually buying your time. Okay, here's $10. And, you know, if you read this email, you get the $10. Right? Here's $5. And I can text you if I use this, it's like, it's like a pay phone number just for you, right? So that's something else you can do with like a machine payable endpoint, right? You can put in front of that. Okay, so all these derived from that same basic, primitive, right? And from the hackathon standpoint, you can try out all these tutorials are trying to co learn. And you can ask questions@slack.twitter.com right? Now,

Unknown Speaker  42:40  
you might ask, Alright, so what comes next? What, what kinds of things? Can you do this, I will show you one real production app that we've built. So show you a ton of demos, okay, I'll show you one production app that we built that you can actually mess around with to get a feel for this kind of thing. And so this is this tasks app, okay, and you can go to the beta and get get beta access, if you want to play around with that. I'll just show you some screenshots real quick. So essentially, you do these tasks and complete them turn Bitcoin, every task you finish is gives you a micro payment. Okay? And so you then can export your Bitcoin to Coinbase, or to your local wallet. And it's really simple. So you've got like surveys over here, you fill out those surveys, and you just get money. Okay, really easy, right? But this is what I mean about how it's generally been hard to have websites that pay you, right? Like this is actually something that does not exist really on the internet right now. And what Bitcoin means is it means instant jobs, in the same way that like a hash tag is like an instant community, like a Bitcoin address gives you an instant job. So you just go to websites, or clicking buttons and making money. And so over here, basically, you can then cash out, the reason we require like a LinkedIn or Facebook integration, is just to prevent like bots from trying to spam it, right? So prove that you're human. And then boom, you can just cash out to the current address, right? This is an example of like a real application that you can do with with micro payments. Okay, and like a production app. See, if you want to try this out, as I mentioned, go to go to this URL, here's access code Brown, October 13. And let me know what you think. Right? So phone version is coming soon. desktop web only, only for today. All right. So let me just skip ahead. This is the I mean, if you want to see this is just basically the phone app. And the way these are connected is basically So first, it's the first production app using it. Second, as I mentioned at the beginning, if you want to just mess around from a coding standpoint, if you go and do tasks over here, you get some free digital currency for coding. And we're going to add a theory and support and so on. So every new digital currency that comes out, click buttons, get some z cash, quick buttons, get some aetherium, click buttons, get some Mineiro, right. And so if you want to mess around with a new digital currency, it's a really quick way of just doing it right. In third. Like eventually, we're going to make it so every single human who's on here can expose the machine payable endpoint themselves. So you can accept tasks just for money, like and you can also script other people for it. So it's like your own grown army, which is kind

Unknown Speaker  45:01  
of cool. Okay,

Unknown Speaker  45:03  
so that's it. Um, so let me summarize in the mean code a bit. And so basically we talked about was this way of building machine payable endpoints, you could do like payment required 5000 satoshis. And put that in front of any existing web endpoint. We talked about a bunch of different kinds of applications that you can build. And finally, we talked about a production application with the, you know, tasks where you can do micro tasks for micro payments. And so that's it.

Unknown Speaker  45:32  
Thank you very much.

Transcribed by https://otter.ai
